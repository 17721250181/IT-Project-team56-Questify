# ============================================================
# CI (tests on PRs and pushes) + CD (staging/production deployments)
# Staging branch: TestMainBranch
# Production branch: main
# ============================================================

name: CI/CD Pipeline

on:
  pull_request: # CI for all PRs
    branches: ["**"]
  push: # CI + CD on specified branches
    branches: [TestMainBranch, main]
  workflow_dispatch:

# Permissions required by Pages
permissions:
  contents: read
  pages: write
  id-token: write

env:
  STAGING_BRANCH: TestMainBranch
  PRODUCTION_BRANCH: main
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  # -----------------------------
  # BACKEND CI: Django + Postgres
  # -----------------------------
  backend-ci:
    name: Backend CI (Django + PostgreSQL)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s --health-timeout=5s --health-retries=5

    env:
      DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
      SECRET_KEY: test-secret
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: backend/requirements.txt

      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Migrate
        working-directory: backend
        run: python manage.py migrate --noinput

      - name: Run backend tests
        working-directory: backend
        run: pytest -q

  # ------------------------------------
  # FRONTEND CI: tests + production build
  # ------------------------------------
  frontend-ci:
    name: Frontend CI (tests + build)
    runs-on: ubuntu-latest
    needs: backend-ci

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests (vitest)
        working-directory: frontend
        run: npm run test -- --run

      - name: Build frontend (Vite)
        working-directory: frontend
        run: npm run build

  # ----------------------------------------------------
  # PREPARE PAGES ARTIFACT (only on pushes to production branch)
  # - enables Pages if needed (idempotent)
  # - uploads frontend/dist as the Pages artifact
  # ----------------------------------------------------
  pages-prepare:
    name: Prepare GitHub Pages artifact
    runs-on: ubuntu-latest
    needs: frontend-ci
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install + build (idempotent in case job runs alone)
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Configure Pages (enable if missing)
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

  # -------------------------------------
  # BACKEND STAGING: Deploy to Render Staging
  # -------------------------------------
  backend-deploy-staging:
    name: Deploy Backend to Render (Staging)
    runs-on: ubuntu-latest
    needs: backend-ci
    if: github.event_name != 'pull_request'
      && github.ref == 'refs/heads/TestMainBranch'
      && vars.ENABLE_RENDER_STAGING == 'true'
      && secrets.RENDER_STAGING_DEPLOY_HOOK != ''

    steps:
      - name: Ensure RENDER_STAGING_DEPLOY_HOOK is set
        run: |
          if [ -z "${{ secrets.RENDER_STAGING_DEPLOY_HOOK }}" ]; then
            echo "::error::RENDER_STAGING_DEPLOY_HOOK secret is missing."
            echo "Add it in Settings → Secrets and variables → Actions."
            exit 1
          fi

      - name: Trigger Render staging deploy hook
        run: curl -fsS -X POST "${{ secrets.RENDER_STAGING_DEPLOY_HOOK }}"

  # -------------------------------------
  # BACKEND PRODUCTION: Deploy to Render Production
  # -------------------------------------
  backend-deploy-production:
    name: Deploy Backend to Render (Production)
    runs-on: ubuntu-latest
    needs: backend-ci
    if: github.event_name != 'pull_request'
      && github.ref == 'refs/heads/main'
      && vars.ENABLE_RENDER_PRODUCTION == 'true'
      && secrets.RENDER_PRODUCTION_DEPLOY_HOOK != ''

    steps:
      - name: Ensure RENDER_PRODUCTION_DEPLOY_HOOK is set
        run: |
          if [ -z "${{ secrets.RENDER_PRODUCTION_DEPLOY_HOOK }}" ]; then
            echo "::error::RENDER_PRODUCTION_DEPLOY_HOOK secret is missing."
            echo "Add it in Settings → Secrets and variables → Actions."
            exit 1
          fi

      - name: Trigger Render production deploy hook
        run: curl -fsS -X POST "${{ secrets.RENDER_PRODUCTION_DEPLOY_HOOK }}"

  # -------------------------------------------
  # FRONTEND PRODUCTION: Publish Pages artifact to Pages
  # -------------------------------------------
  frontend-deploy:
    name: Deploy Frontend to GitHub Pages (Production)
    runs-on: ubuntu-latest
    needs: pages-prepare
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && vars.ENABLE_PAGES_DEPLOY == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
      - name: Deploy to Pages
        id: deploy
        uses: actions/deploy-pages@v4
