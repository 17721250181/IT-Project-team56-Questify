# =============================================================================
# CI/CD PIPELINE
# - CI: tests/build on PRs and on pushes
# - CD: deploys only on pushes to TestMainBranch (after CI passes)
# =============================================================================

name: CI/CD Pipeline

on:
  pull_request:
    branches: ['**']                  # CI on all PRs
  push:
    branches: [ TestMainBranch ]      # CI + CD on this branch
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if not on deploy branch'
        required: false
        default: false
        type: boolean

# Permissions needed for GitHub Pages deploy
permissions:
  contents: read
  pages: write
  id-token: write

# Prevent overlapping Pages publishes; do not cancel deploys on TestMainBranch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/TestMainBranch' }}

env:
  DEPLOY_BRANCH: TestMainBranch
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # ===========================================================================
  # CI: BACKEND (Django + PostgreSQL)
  # ===========================================================================
  backend-ci:
    name: Backend CI (Django + PostgreSQL)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass123
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s

    env:
      DATABASE_URL: postgresql://testuser:testpass123@localhost:5432/testdb
      SECRET_KEY: test-secret-key-for-ci-only
      DEBUG: false
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pytest

      - name: Run migrations
        working-directory: backend
        run: |
          python manage.py makemigrations --check --dry-run
          python manage.py migrate --noinput

      - name: Run backend tests
        working-directory: backend
        run: pytest -v

  # ===========================================================================
  # CI: FRONTEND (tests + build) and prepare Pages artifact on deploy branch
  # ===========================================================================
  frontend-ci:
    name: Frontend CI (tests + build)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: backend-ci

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test

      - name: Build frontend (Vite)
        working-directory: frontend
        env:
          # Set this repo Action Variable in Settings → Variables → Actions
          # e.g. https://<your-render-service>.onrender.com
          VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL }}
        run: npm run build

      # Configure Pages and upload artifact ONLY on pushes to the deploy branch
      - name: Configure GitHub Pages
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/TestMainBranch'
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/TestMainBranch'
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

  # ===========================================================================
  # CD: BACKEND (Render deploy hook)
  # ===========================================================================
  backend-cd:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    if: |
      (github.ref == 'refs/heads/TestMainBranch' || inputs.force_deploy) &&
      github.event_name != 'pull_request' &&
      needs.backend-ci.result == 'success' &&
      needs.frontend-ci.result == 'success'

    steps:
      - name: Check deploy hook secret
        run: |
          if [[ -z "${{ secrets.RENDER_DEPLOY_HOOK }}" ]]; then
            echo "::error title=Missing Secret::RENDER_DEPLOY_HOOK is not configured"
            echo "Add it in Settings → Secrets and variables → Actions"
            exit 1
          fi

      - name: Trigger Render deploy
        run: |
          # Show HTTP status while wiring; switch to -fsS once stable.
          curl -i -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"

  # ===========================================================================
  # CD: FRONTEND (GitHub Pages)
  # ===========================================================================
  frontend-cd:
    name: Deploy Frontend to GitHub Pages
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-cd]
    if: |
      (github.ref == 'refs/heads/TestMainBranch' || inputs.force_deploy) &&
      github.event_name != 'pull_request' &&
      needs.frontend-ci.result == 'success' &&
      (needs.backend-cd.result == 'success' || needs.backend-cd.result == 'skipped')

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v4
