name: CI (Backend + Frontend + E2E)

on: push

jobs:
  backend-test:
    name: Backend (Django + pytest on Postgres)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: appdb
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres -d appdb"
          --health-interval=10s --health-timeout=5s --health-retries=5

    env:
      # CI use Postgres；local use SQLite（if DATABASE_URL not set then SQLite）
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/appdb
      SECRET_KEY: test-secret
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Django migrate
        working-directory: backend
        run: |
          python manage.py migrate --noinput

      - name: Run backend tests
        working-directory: backend
        run: |
          pytest -s -v

  frontend-test-build:
    name: Frontend (Jest + Build)
    runs-on: ubuntu-latest
    needs: backend-test

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20 (Vite needs >=20.19)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install frontend deps
        working-directory: frontend
        run: |
          npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test

      - name: Build frontend (Vite)
        working-directory: frontend
        run: |
          npm -s run build

  # e2e-playwright:
  #   name: E2E (Playwright)
  #   runs-on: ubuntu-latest
  #   needs: [backend-test, frontend-test-build]

  #   services:
  #     postgres:
  #       image: postgres:15
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: appdb
  #       ports: ["5432:5432"]
  #       options: >-
  #         --health-cmd="pg_isready -U postgres -d appdb"
  #         --health-interval=10s --health-timeout=5s --health-retries=5

  #   env:
  #     DATABASE_URL: postgres://postgres:postgres@localhost:5432/appdb
  #     SECRET_KEY: test-secret


  #   steps:
  #     - uses: actions/checkout@v4

  #     # backend set up
  #     - name: Set up Python 3.11
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"

  #     - name: Install backend deps & migrate
  #       working-directory: backend
  #       run: |
  #         python -m pip install -U pip
  #         pip install -r requirements.txt
  #         python manage.py migrate --noinput

  #     - name: Start Django server
  #       working-directory: backend
  #       run: |
  #         nohup python manage.py runserver 0.0.0.0:8000 >/dev/null 2>&1 &

  #     # frontend dev server
  #     - name: Set up Node.js 20
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"

  #     - name: Install frontend deps
  #       working-directory: frontend
  #       run: npm ci

  #     - name: Start Vite dev server
  #       working-directory: frontend
  #       env:
  #         VITE_API_BASE_URL: ${{ env.VITE_API_BASE_URL }}
  #       run: |
  #         nohup npm run dev >/dev/null 2>&1 &

  #     # install and run Playwright
  #     - name: Install Playwright
  #       run: |
  #         npm -g i @playwright/test
  #         npx playwright install --with-deps

  #     - name: Run Playwright tests
  #       env:
  #         # base url for testing
  #         BASE_URL: http://localhost:5173
  #       run: |
  #         # 如果你使用了 playwright.config.ts 并配置了 webServer，可直接 `npx playwright test`
  #         # 这里假设你在 tests 中使用 process.env.BASE_URL
  #         npx playwright test --reporter=line