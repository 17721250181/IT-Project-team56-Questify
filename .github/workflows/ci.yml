# -------------------------------------------------------------
# CI (Backend + Frontend)  +  CD (Render backend + GitHub Pages)
# -------------------------------------------------------------
name: CI (Backend + Frontend + Deploy)

on:
  # CI on any PR; CD will not run on PRs (only tests/build)
  pull_request:
    branches: ['**']

  # CI + CD on pushes to the deployment branch
  push:
    branches: [ TestMainBranch ]

  # Manual runs (useful for debugging)
  workflow_dispatch:

# Permissions required by Pages actions
permissions:
  contents: read
  pages: write
  id-token: write

# Avoid overlapping Pages publishes
concurrency:
  group: pages
  cancel-in-progress: true

# Single source of truth for the deploy branch
env:
  DEPLOY_BRANCH: TestMainBranch

jobs:
  # -----------------------------------------------------------
  # BACKEND CI: Django tests on Postgres
  # -----------------------------------------------------------
  backend-test:
    name: Backend (Django + pytest on Postgres)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: appdb
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U postgres -d appdb"
          --health-interval=10s --health-timeout=5s --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/appdb
      SECRET_KEY: test-secret
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11 (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Django migrate
        working-directory: backend
        run: python manage.py migrate --noinput

      - name: Run backend tests
        working-directory: backend
        run: pytest -s -v

  # -----------------------------------------------------------
  # FRONTEND CI: tests + build + (on deploy branch) upload Pages artifact
  # -----------------------------------------------------------
  frontend-test-build:
    name: Frontend (tests + build)
    runs-on: ubuntu-latest
    needs: backend-test

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20 (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test

      - name: Build frontend (Vite)
        working-directory: frontend
        run: npm -s run build

      # Enable & configure Pages (safe to run repeatedly).
      # Only on push to the deploy branch (never on PRs).
      - name: Configure Pages
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', vars.DEPLOY_BRANCH)
        uses: actions/configure-pages@v4
        with:
          enablement: true

      # Upload the built site as the Pages artifact (for deploy job)
      - name: Upload artifact for Pages
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', vars.DEPLOY_BRANCH)
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

  # -----------------------------------------------------------
  # BACKEND CD: trigger Render deployment (deploy hook)
  # -----------------------------------------------------------
  backend-deploy:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    needs: backend-test
    # CD only on push to DEPLOY_BRANCH (never on PRs)
    if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', vars.DEPLOY_BRANCH)

    steps:
      - name: Fail clearly if the deploy hook secret is missing
        run: |
          if [ -z "${{ secrets.RENDER_DEPLOY_HOOK }}" ]; then
            echo "::error::RENDER_DEPLOY_HOOK secret is missing."
            echo "Add it in Repo → Settings → Secrets and variables → Actions."
            exit 1
          fi

      - name: Trigger Render deploy hook (show HTTP status)
        run: |
          # For initial wiring, show the status line; switch to -fsS once stable.
          curl -i -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"

  # -----------------------------------------------------------
  # FRONTEND CD: publish to GitHub Pages
  # -----------------------------------------------------------
  frontend-deploy:
    name: Deploy Frontend to GitHub Pages
    runs-on: ubuntu-latest
    needs: frontend-test-build
    # CD only on push to DEPLOY_BRANCH (never on PRs)
    if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', vars.DEPLOY_BRANCH)
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v4
