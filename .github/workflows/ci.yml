# ==============================================================
# CI/CD: Django backend + React/Vite frontend
# - CI on PRs and pushes (tests + build)
# - CD only on pushes to DEPLOY_BRANCH after CI passes
# ==============================================================

name: CI/CD Pipeline

on:
  pull_request:
    branches: ['testmainbranch']  # CI on PRs to these branches
    
  push:
    branches: ['testmainbranch']  # CI on pushes to these branches
  workflow_dispatch:          # manual runs

# Permissions needed by GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Avoid overlapping Pages publishes
concurrency:
  group: pages
  cancel-in-progress: true

# ---- Configure your deploy branch here ----
env:
  DEPLOY_BRANCH: TestMainBranch
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

# =========================
# BACKEND CI: Django + Pytest
# =========================
jobs:
  backend-ci:
    name: Backend CI (Django + PostgreSQL)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass123
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s --health-timeout=5s --health-retries=5
          --health-start-period=30s

    env:
      DATABASE_URL: postgresql://testuser:testpass123@localhost:5432/testdb
      SECRET_KEY: test-secret-key
      DEBUG: "False"
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Migrate DB
        working-directory: backend
        run: python manage.py migrate --noinput

      - name: Run backend tests
        working-directory: backend
        run: pytest -q

  # =========================
  # FRONTEND CI: tests + build
  # =========================
  frontend-ci:
    name: Frontend CI (tests + build)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: backend-ci

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        # --if-present avoids failing if "test" script is missing
        run: npm test --if-present -- --ci --passWithNoTests

      - name: Build frontend (Vite)
        working-directory: frontend
        run: npm run build

  # =====================================================
  # PREPARE PAGES ARTIFACT (only on deploy branch, push)
  # Moves Pages config out of CI so CI cannot fail on it.
  # =====================================================
  pages-prepare:
    name: Prepare GitHub Pages artifact
    runs-on: ubuntu-latest
    needs: frontend-ci
    # pages-prepare job
    if: ${{ github.event_name != 'pull_request' && github.ref_name == vars.DEPLOY_BRANCH }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure GitHub Pages (enable if needed)
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Upload Pages artifact (frontend/dist)
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

  # ==========================================
  # BACKEND CD: deploy to Render via webhook
  # ==========================================
  backend-deploy:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    needs: backend-ci
    if: ${{ github.event_name != 'pull_request' && github.ref_name == vars.DEPLOY_BRANCH }}

    steps:
      - name: Ensure RENDER_DEPLOY_HOOK secret is set
        run: |
          if [ -z "${{ secrets.RENDER_DEPLOY_HOOK }}" ]; then
            echo "::error::RENDER_DEPLOY_HOOK secret is missing. Add it in Settings → Secrets and variables → Actions."
            exit 1
          fi

      - name: Trigger Render deploy hook
        run: curl -fsS -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"

  # ==========================================
  # FRONTEND CD: publish artifact to GH Pages
  # ==========================================
  frontend-deploy:
    name: Deploy Frontend to GitHub Pages
    runs-on: ubuntu-latest
    needs: pages-prepare
    if: github.event_name != 'pull_request' && github.ref_name == vars.DEPLOY_BRANCH
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v4
