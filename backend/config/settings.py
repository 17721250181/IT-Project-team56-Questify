"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv

load_dotenv()


def env_flag(name: str, default: bool = False) -> bool:
    """Return boolean environment flag with sensible defaults."""
    value = os.getenv(name)
    if value is None:
        return default
    return value.strip().lower() in {"1", "true", "yes", "on"}


def env_list(name: str, default=None):
    """Parse comma/space separated environment values into a list."""
    value = os.getenv(name)
    if not value:
        return list(default or [])
    parts = []
    for chunk in value.replace(",", " ").split():
        cleaned = chunk.strip()
        if cleaned:
            parts.append(cleaned)
    return parts


def normalize_origin(origin: str | None) -> str | None:
    if not origin:
        return None
    return origin.rstrip("/")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "dev-secret-key")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_flag("DJANGO_DEBUG", env_flag("DEBUG", True))
USE_WHITENOISE = env_flag("USE_WHITENOISE", True)

allowed_hosts_env = env_list("DJANGO_ALLOWED_HOSTS") or env_list("ALLOWED_HOSTS")
ALLOWED_HOSTS = allowed_hosts_env or [".onrender.com"]
if DEBUG:
    ALLOWED_HOSTS += ["localhost", "127.0.0.1"]
ALLOWED_HOSTS = list(dict.fromkeys(ALLOWED_HOSTS))


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "questions",
    "user",
    "attempts",
    "leaderboard",
    "adminpanel",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if USE_WHITENOISE:
    try:
        import whitenoise  # noqa: F401  # pragma: no cover
    except ImportError:
        if not DEBUG:
            raise
        USE_WHITENOISE = False

if USE_WHITENOISE:
    security_index = MIDDLEWARE.index("django.middleware.security.SecurityMiddleware")
    MIDDLEWARE.insert(security_index + 1, "whitenoise.middleware.WhiteNoiseMiddleware")

local_dev_origins = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

frontend_origin = normalize_origin(os.getenv("FRONTEND_ORIGIN") or os.getenv("FRONTEND_URL"))
FRONTEND_ORIGIN = frontend_origin
extra_cors = env_list("DJANGO_CORS_ALLOWED_ORIGINS") or env_list("CORS_ALLOWED_ORIGINS")

cors_candidate_origins = []
if DEBUG:
    cors_candidate_origins.extend(local_dev_origins)
if frontend_origin:
    cors_candidate_origins.append(frontend_origin)
cors_candidate_origins.extend(normalize_origin(origin) for origin in extra_cors if origin)
CORS_ALLOWED_ORIGINS = [
    origin for origin in dict.fromkeys(filter(None, cors_candidate_origins))
] or local_dev_origins

extra_csrf_trusted = env_list("DJANGO_CSRF_TRUSTED_ORIGINS") or env_list("CSRF_TRUSTED_ORIGINS")
csrf_candidate_origins = []
if frontend_origin:
    csrf_candidate_origins.append(frontend_origin)
csrf_candidate_origins.extend(normalize_origin(origin) for origin in extra_csrf_trusted if origin)
if DEBUG:
    csrf_candidate_origins.extend(local_dev_origins)
CSRF_TRUSTED_ORIGINS = [
    origin for origin in dict.fromkeys(filter(None, csrf_candidate_origins))
]
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

### Support database url for CI/render to use Postgres
DATABASE_URL = os.getenv("DATABASE_URL")
if DATABASE_URL:
    DATABASES = {"default": dj_database_url.parse(DATABASE_URL, conn_max_age=600)}
# Else use sqlite
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
if USE_WHITENOISE and not DEBUG:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django REST Framework configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",  # Require authentication by default
    ],
}

# Session and CSRF security
SESSION_COOKIE_NAME = os.getenv("SESSION_COOKIE_NAME", "sessionid")
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = env_flag("SESSION_COOKIE_SECURE", not DEBUG)
SESSION_COOKIE_SAMESITE = os.getenv("SESSION_COOKIE_SAMESITE", "Lax" if DEBUG else "None")
SESSION_COOKIE_AGE = int(os.getenv("SESSION_COOKIE_AGE", str(60 * 60 * 4)))  # 4 hours
SESSION_COOKIE_PATH = os.getenv("SESSION_COOKIE_PATH", "/")
SESSION_COOKIE_DOMAIN = os.getenv("SESSION_COOKIE_DOMAIN") or None
SESSION_EXPIRE_AT_BROWSER_CLOSE = env_flag("SESSION_EXPIRE_AT_BROWSER_CLOSE", False)
SESSION_SAVE_EVERY_REQUEST = env_flag("SESSION_SAVE_EVERY_REQUEST", False)

CSRF_COOKIE_NAME = os.getenv("CSRF_COOKIE_NAME", "csrftoken")
CSRF_COOKIE_HTTPONLY = env_flag("CSRF_COOKIE_HTTPONLY", False)
CSRF_COOKIE_SECURE = env_flag("CSRF_COOKIE_SECURE", not DEBUG)
CSRF_COOKIE_SAMESITE = os.getenv("CSRF_COOKIE_SAMESITE", "Lax" if DEBUG else "None")
CSRF_COOKIE_PATH = os.getenv("CSRF_COOKIE_PATH", "/")
CSRF_COOKIE_DOMAIN = os.getenv("CSRF_COOKIE_DOMAIN") or None
CSRF_COOKIE_AGE = int(os.getenv("CSRF_COOKIE_AGE", str(60 * 60 * 24)))  # 1 day
CSRF_USE_SESSIONS = env_flag("CSRF_USE_SESSIONS", False)

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = env_flag("SECURE_SSL_REDIRECT", not DEBUG)

# Position for user profile pictures
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Email domain restrictions for registration
ALLOWED_EMAIL_DOMAINS = {"student.unimelb.edu.au", "unimelb.edu.au"}

# Email configuration for password reset
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"  # For development
# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"  # For production
# EMAIL_HOST = "smtp.gmail.com"
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = "your-email@gmail.com"
# EMAIL_HOST_PASSWORD = "your-app-password"
DEFAULT_FROM_EMAIL = "noreply@questify.com"

# Leaderboard points
LEADERBOARD_POINTS_PER_ATTEMPT = 1     # Points per attempt
LEADERBOARD_POINTS_BONUS_CORRECT = 2   # Bonus points for correct answer

# Activity points (set to 0 if not used)
LEADERBOARD_POINTS_PER_COMMENT = 2     # Points per comment
LEADERBOARD_POINTS_PER_RATING  = 1     # Points per rating
# LEADERBOARD_POINTS_PER_LIKE = 0      # Disabled: M2M relationship not directly supported

LEADERBOARD_ACTIVITY_MODELS = {
    # "app_label.ModelName": {"user_field": "field_name"}
    "questions.Comment": {"user_field": "author"},       # Fixed: field is 'author' not 'user'
    "questions.QuestionRating": {"user_field": "user"},  # Fixed: model is 'QuestionRating' not 'Rating'
    # Note: "questions.Like" removed - it's a M2M field, not a separate model
}

# Admin-facing email safelist (lowercase). Update this list manually or via ADMIN_EMAILS env var.
_admin_email_default = {"admin@questify.com"}
ADMIN_EMAILS = {email.lower() for email in env_list("ADMIN_EMAILS")} or _admin_email_default
